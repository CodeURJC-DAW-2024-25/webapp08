openapi: 3.1.0
info:
  title: OpenAPI definition
  version: v0
servers:
- url: https://localhost:8443
  description: Generated server url
paths:
  /api/v1/users:
    get:
      tags:
      - user-rest-controller
      operationId: me
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
    put:
      tags:
      - user-rest-controller
      operationId: replaceUserPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PublicUserDTO"
        required: true
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/v1/users/{id}/products/{pid}:
    put:
      tags:
      - user-rest-controller
      operationId: updateProduct
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: pid
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductDTO"
        required: true
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/v1/users/{id}/image:
    get:
      tags:
      - user-rest-controller
      operationId: getPostImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
    put:
      tags:
      - user-rest-controller
      operationId: editUserImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                imageFile:
                  type: string
                  format: binary
              required:
              - imageFile
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/v1/products/{id}/image:
    get:
      tags:
      - product-rest-controller
      operationId: getPostImage_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                format: binary
    put:
      tags:
      - product-rest-controller
      operationId: updatePostImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
              required:
              - image
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
    post:
      tags:
      - product-rest-controller
      operationId: postImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
              required:
              - image
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/v1/users/{user_id}/products/{product_id}/ratings:
    post:
      tags:
      - user-rest-controller
      operationId: rateProduct
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: product_id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RatingDTO"
        required: true
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/v1/users/{id}/products:
    get:
      tags:
      - user-rest-controller
      operationId: getUserProducts
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
    post:
      tags:
      - user-rest-controller
      operationId: publishProduct
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductDTO"
        required: true
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/v1/products/{id_product}/offers:
    get:
      tags:
      - product-rest-controller
      operationId: getOffers
      parameters:
      - name: id_product
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OfferDTO"
    post:
      tags:
      - product-rest-controller
      operationId: PlaceBid
      parameters:
      - name: id_product
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OfferDTO"
        required: true
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OfferDTO"
  /api/v1/auth/user:
    post:
      tags:
      - login-rest-controller
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDTO"
        required: true
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/v1/auth/refresh:
    post:
      tags:
      - login-rest-controller
      operationId: refreshToken
      parameters:
      - name: RefreshToken
        in: cookie
        required: false
        schema:
          type: string
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthResponse"
  /api/v1/auth/logout:
    post:
      tags:
      - login-rest-controller
      operationId: logOut
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthResponse"
  /api/v1/auth/login:
    post:
      tags:
      - login-rest-controller
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
        required: true
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthResponse"
  /api/v1/users/{id}:
    get:
      tags:
      - user-rest-controller
      operationId: getUserById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PublicUserDTO"
  /api/v1/users/{id}/boughtProducts:
    get:
      tags:
      - user-rest-controller
      operationId: getBoughtProducts
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/v1/products:
    get:
      tags:
      - product-rest-controller
      operationId: getProducts
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageProductBasicDTO"
  /api/v1/products/{id_product}:
    get:
      tags:
      - product-rest-controller
      operationId: getProduct
      parameters:
      - name: id_product
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ProductDTO"
    delete:
      tags:
      - product-rest-controller
      operationId: deleteProduct
      parameters:
      - name: id_product
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
  /api/v1/products/{id_product}/transaction:
    get:
      tags:
      - product-rest-controller
      operationId: getTransaction
      parameters:
      - name: id_product
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TransactionDTO"
components:
  schemas:
    PublicUserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        reputation:
          type: number
          format: double
        visibleName:
          type: string
        contact:
          type: string
        description:
          type: string
        zipCode:
          type: integer
          format: int32
        image:
          type: string
    OfferBasicDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        cost:
          type: number
          format: double
    ProductDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        iniValue:
          type: number
          format: double
        iniHour:
          type: string
          format: date-time
        endHour:
          type: string
          format: date-time
        state:
          type: string
        imgURL:
          type: string
        sellerId:
          type: integer
          format: int64
        duration:
          type: integer
          format: int64
        offers:
          type: array
          items:
            $ref: "#/components/schemas/OfferBasicDTO"
    RatingDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        rating:
          type: integer
          format: int32
    OfferDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        cost:
          type: number
          format: double
        hour:
          type: string
          format: date-time
        user:
          $ref: "#/components/schemas/UserBasicDTO"
        product:
          $ref: "#/components/schemas/ProductBasicDTO"
    ProductBasicDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        imgURL:
          type: string
    UserBasicDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    UserDTO:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        zipCode:
          type: string
        username:
          type: string
        visibleName:
          type: string
        description:
          type: string
    AuthResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - SUCCESS
          - FAILURE
        message:
          type: string
        error:
          type: string
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    PageProductBasicDTO:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/ProductBasicDTO"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: "#/components/schemas/PageableObject"
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: "#/components/schemas/SortObject"
        unpaged:
          type: boolean
        pageSize:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        paged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        unsorted:
          type: boolean
        sorted:
          type: boolean
    TransactionDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        product:
          $ref: "#/components/schemas/ProductBasicDTO"
        seller:
          $ref: "#/components/schemas/UserBasicDTO"
        buyer:
          $ref: "#/components/schemas/UserBasicDTO"
        cost:
          type: number
          format: double
